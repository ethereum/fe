searchState.loadedDescShard("fe_mir", 0, "This module contains dominator tree related structs.\nThis module contains implementation of <code>Post Dominator Tree</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDominance frontiers of each blocks.\nCompute dominance frontiers of each blocks.\nReturns <code>true</code> if block1 dominates block2.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns number of frontier blocks of a <code>block</code>.\nReturns all dominance frontieres of a <code>block</code>.\nReturns the immediate dominator of the <code>block</code>. Returns None …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if block is reachable from the entry block.\nReturns blocks in RPO.\nReturns <code>true</code> if block1 strictly dominates block2.\nChild loops that the loop includes.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nA header of the loop.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the <code>block</code> is in the <code>lp</code>.\nReturns all blocks in the loop.\nReturns header block of the <code>lp</code>.\nReturns number of loops found.\nReturns the loop that the <code>block</code> belongs to. If the <code>block</code> …\nReturns all loops in a function body. An outer loop is …\nA parent loop that includes the loop.\nGet parent loop of the <code>lp</code> if exists.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if block is reachable from the exit blocks.\nRepresentative struct for the query group.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWrites mir graphs of functions in a <code>module</code>.\nAn original source information that indicates where <code>mir</code> …\nThis module provides a collection of structs to modify …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if current block is terminated.\nSpecify a current location of <code>BodyCursor</code>\nReturns current block that cursor points.\nReturns current inst that cursor points.\nReturns the argument unchanged.\nReturns the argument unchanged.\nInsert <code>BasicBlockId</code> to a location where a cursor points. …\nInsert <code>InstId</code> to a location where a cursor points. If you …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRemove a current pointed <code>block</code> and contained insts from a …\nRemove a current pointed <code>Inst</code> from a function body. A …\nSets a cursor to an entry block.\nRepresents basic block order and instruction order.\nAppends a given <code>block</code> to a function body.\nAppends <code>inst</code> to the end of a <code>block</code>\nReturns a number of block in a function.\nReturns an entry block of a function body.\nReturns first instruction of a block if exists.\nReturns the argument unchanged.\nInserts a given <code>block</code> after a <code>after</code> block.\nInserts a given <code>block</code> before a <code>before</code> block.\nInsert <code>inst</code> after <code>after</code> inst.\nInsert <code>inst</code> before <code>before</code> inst.\nReturns a block to which a given <code>inst</code> belongs.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if a block doesn’t contain any block.\nReturns <code>true</code> if a function body contains a given <code>block</code>.\nReturns <code>true</code> is a given <code>inst</code> is inserted.\nReturns <code>true</code> if a <code>block</code> is terminated.\nReturns an iterator which iterates all basic blocks in a …\nReturns an iterator which iterates all instruction in a …\nReturns a last block of a function body.\nReturns a last instruction of a block.\nReturns a next block of a given block.\nReturns a next instruction of a given <code>inst</code>.\nPrepends <code>inst</code> to the beginning of a <code>block</code>\nReturns a previous block of a given block.\nReturns a previous instruction of a given <code>inst</code>.\nRemove a given <code>block</code> from a function. All instructions in …\nRemove instruction from the function body.\nReturns a terminator instruction of a block.\nAn interned Id for <code>Constant</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA module where a constant is declared.\nA name of a constant.\nA span where a constant is declared.\nA type of a constant.\nA value of a constant.\nA collection of basic block, instructions and values …\nA function can be called from other modules, and also can …\nA function body, which is not stored in salsa db to enable …\nRepresents function signature.\nA function can only be called within the same module.\nA function can be called from other modules, but can NOT …\nReturns <code>class_name::fn_name</code> if a function is a method else …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns an instruction result\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns Some(<code>local_name</code>) if value is <code>Value::Local</code>.\nTracks order of basic blocks and instructions in a …\nReturns a type suffix if a generic function was …\nAccess to aggregate fields or elements.\nConstructs aggregate value, i.e. struct, tuple and array.\nBinary instruction.\nConditional branching instruction.\nThis is not a real instruction, just used to tag a …\n<code>~</code> operator for bitwise inversion.\nUnconditional jump instruction.\nLoad a primitive value from a ptr\n<code>-</code> operator for negation.\n<code>not</code> operator for logical inversion.\nA cast from a primitive type to a primitive type.\nUnary instruction.\nA cast from an enum type to its underlying type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA static array type definition.\nA user defined struct type definition.\nA user defined struct type definition.\nA user defined struct type definition.\nA map type definition.\nA user defined struct type definition.\nA tuple type definition.\nAn interned Id for <code>ArrayDef</code>.\nReturns an offset of the element of aggregate type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns size of the type in bytes.\nA constant value.\nAn immediate value.\nA local variable declared in a function body.\nA value resulted from an instruction.\nA singleton value representing <code>Unit</code> type.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n<code>true</code> if a local is a function argument.\n<code>true</code> if a local is introduced in MIR.\nAn original name of a local variable.")