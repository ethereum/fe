searchState.loadedDescShard("fe_common", 0, "An exclusive span of byte offsets in a source file.\nCompare the given strings and panic when not equal with a …\nA byte offset specifying the exclusive end of a span.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nA byte offset specifying the inclusive start of a span.\nRepresentative struct for the query group.\nSet with `fn set_file_content(&amp;mut self, file: …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nGet access to extra methods pertaining to this query. For …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nLike <code>in_db</code>, but gives access to methods for setting the …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the value of the <code>file_content</code> input.\nSet the value of the <code>file_content</code> input and promise that …\nAn unexpected bug.\nAn error.\nA help message.\nA note.\nA severity level for diagnostic messages.\nA warning.\nDiagnostic data structures.\nFormat the given diagnostics as a string.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConvert into a [<code>codespan_reporting::Diagnostic::Label</code>]\nCreate a primary label with the given message. This will …\nPrint the given diagnostics to stderr.\nCreate a secondary label with the given message. This will …\nAn unexpected bug.\nRepresents a diagnostic message that can provide …\nAn error.\nA help message.\nA label describing an underlined region of code associated …\nA note.\nLabels that describe the primary cause of a diagnostic.\nLabels that provide additional context for a diagnostic.\nA severity level for diagnostic messages.\nA warning.\nCreate a new diagnostic with a severity of <code>Severity::Bug</code>.\nAn optional code that identifies this diagnostic.\nCreate a new diagnostic with a severity of <code>Severity::Error</code>.\nThe file that we are labelling.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate a new diagnostic with a severity of <code>Severity::Help</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSource labels that describe the cause of the diagnostic. …\nAn optional message to provide some additional information …\nThe main message associated with this diagnostic.\nCreate a new label.\nCreate a new diagnostic.\nCreate a new diagnostic with a severity of <code>Severity::Note</code>.\nNotes that are associated with the primary cause of the …\nCreate a new label with a style of <code>LabelStyle::Primary</code>.\nThe range in bytes we are going to include in the final …\nCreate a new label with a style of <code>LabelStyle::Secondary</code>.\nThe overall severity of the diagnostic\nThe style of the label.\nCreate a new diagnostic with a severity of …\nSet the error code of the diagnostic.\nAdd some labels to the diagnostic.\nAdd a message to the diagnostic.\nSet the message of the diagnostic.\nAdd some notes to the diagnostic.\nA reference to the current directory, i.e., <code>.</code>.\nUser file; either part of the target project or an …\nA normal component, e.g., <code>a</code> and <code>b</code> in <code>a/b</code>.\nA reference to the parent directory, i.e., <code>..</code>.\nA Windows path prefix, e.g., <code>C:</code> or <code>\\\\server\\share</code>.\nThe root directory component, appears after any prefix and …\nFile is part of the fe standard library\nA single component of a path.\nA slice of a UTF-8 path (akin to <code>str</code>).\nAn owned, mutable UTF-8 path (akin to <code>String</code>).\nProduces an iterator over <code>Utf8Path</code> and its ancestors.\nYields the underlying <code>OsStr</code> slice.\nExtracts the underlying <code>OsStr</code> slice.\nCoerces to a <code>Utf8Path</code> slice.\nConverts a <code>Utf8Path</code> to a <code>Path</code>.\nYields the underlying <code>str</code> slice.\nExtracts the underlying <code>str</code> slice.\nReturns the canonical, absolute form of the path with all …\nReturns the canonical, absolute form of the path with all …\nInvokes <code>capacity</code> on the underlying instance of <code>PathBuf</code>.\nInvokes <code>clear</code> on the underlying instance of <code>PathBuf</code>.\nReturns the common <em>prefix</em> of two paths. If the paths are …\nProduces an iterator over the <code>Utf8Component</code>s of the path.\nDetermines whether <code>child</code> is a suffix of <code>self</code>.\nReturns <code>true</code> if the path points at an existing entity.\nExtracts the extension of <code>self.file_name</code>, if possible.\nReturns the final component of the <code>Utf8Path</code>, if there is …\nExtracts the stem (non-extension) portion of <code>self.file_name</code>…\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts a <code>Path</code> to a <code>Utf8Path</code>.\nCreates a new <code>Utf8PathBuf</code> from a <code>PathBuf</code> containing valid …\nReturns <code>true</code> if the <code>Utf8Path</code> has a root.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nConverts this <code>Utf8PathBuf</code> into a boxed <code>Utf8Path</code>.\nConsumes the <code>Utf8PathBuf</code>, yielding its internal <code>OsString</code> …\nConverts a <code>Box&lt;Utf8Path&gt;</code> into a <code>Utf8PathBuf</code> without …\nConverts a <code>Utf8PathBuf</code> to a <code>PathBuf</code>.\nConsumes the <code>Utf8PathBuf</code>, yielding its internal <code>String</code> …\nReturns <code>true</code> if the <code>Utf8Path</code> is absolute, i.e., if it is …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nReturns <code>true</code> if the <code>Utf8Path</code> is relative, i.e., not …\nReturns <code>true</code> if the path exists on disk and is pointing at …\nProduces an iterator over the path’s components viewed …\nCreates an owned <code>Utf8PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nCreates an owned <code>PathBuf</code> with <code>path</code> adjoined to <code>self</code>.\nDifferentiates between local source files and fe std lib …\nQueries the file system to get information about a file, …\nDirectly wraps a string slice as a <code>Utf8Path</code> slice.\nAllocates an empty <code>Utf8PathBuf</code>.\nReturns the <code>Path</code> without its final component, if there is …\nPath of the file. May include <code>src/</code> dir or longer prefix; …\nTruncates <code>self</code> to <code>self.parent</code>.\nExtends <code>self</code> with <code>path</code>.\nReturns an iterator over the entries within a directory.\nReturns an iterator over the entries within a directory.\nReads a symbolic link, returning the file that the link …\nReads a symbolic link, returning the file that the link …\nInvokes <code>reserve</code> on the underlying instance of <code>PathBuf</code>.\nInvokes <code>reserve_exact</code> on the underlying instance of <code>PathBuf</code>…\nUpdates <code>self.extension</code> to <code>extension</code>.\nUpdates <code>self.file_name</code> to <code>file_name</code>.\nInvokes <code>shrink_to</code> on the underlying instance of <code>PathBuf</code>.\nInvokes <code>shrink_to_fit</code> on the underlying instance of <code>PathBuf</code>…\nDetermines whether <code>base</code> is a prefix of <code>self</code>.\nReturns a path that, when joined onto <code>base</code>, yields <code>self</code>.\nQueries the metadata about a file without following …\nConverts a <code>Utf8Path</code> to an owned <code>Utf8PathBuf</code>.\nReturns <code>Ok(true)</code> if the path points at an existing entity.\nInvokes <code>try_reserve</code> on the underlying instance of <code>PathBuf</code>.\nInvokes <code>try_reserve_exact</code> on the underlying instance of …\nCreates a new <code>Utf8PathBuf</code> with a given capacity used to …\nCreates an owned <code>Utf8PathBuf</code> like <code>self</code> but with the given …\nCreates an owned <code>Utf8PathBuf</code> like <code>self</code> but with the given …\nA helper type to interpret a numeric literal represented …\nA type that represents the radix of a numeric literal.\nReturns number representation of the radix.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nParse the numeric literal to <code>T</code>.\nReturns radix of the numeric literal.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the root path of the current Fe project\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nBuild files are loaded from the file system.\nBuild files are loaded from static file vector.\nFetch and checkout the specified refspec from the remote …\nA trait to derive plural or singular representations from\nGet the full 32 byte hash of the content.\nGet the full 32 byte hash of the content as a byte array.\nTake the first <code>size</code> number of bytes of the hash with no …\nTake the first <code>size</code> number of bytes of the hash and pad …\nWrapper struct for formatting changesets from the …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nConvenience function to serialize objects in RON format …")